//===-- XArchISelDAGToDAG.cpp - A dag to dag inst selector for XArch ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the XArch target.
//
//===----------------------------------------------------------------------===//

#include "XArch.h"
#include "XArchTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

#include "XArchInstrInfo.h"

using namespace llvm;

/// XArchDAGToDAGISel - XArch specific code to select XArch machine
/// instructions for SelectionDAG operations.
///
namespace {
class XArchDAGToDAGISel : public SelectionDAGISel {
  const XArchSubtarget &Subtarget;

public:
  explicit XArchDAGToDAGISel(XArchTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(*TM.getSubtargetImpl()) {}

  void Select(SDNode *N) override;

  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset);

  virtual llvm::StringRef getPassName() const override {
    return "XArch DAG->DAG Pattern Instruction Selection";
  }

private:

// Include the pieces autogenerated from the target description.
#include "XArchGenDAGISel.inc"
};
} // end anonymous namespace

bool XArchDAGToDAGISel::SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    EVT PtrVT = getTargetLowering()->getPointerTy(CurDAG->getDataLayout());
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), PtrVT);
    Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
    return true;
  }
  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress ||
      Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
    return false; // direct calls.
  }

  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
  return true;
}

void XArchDAGToDAGISel::Select(SDNode *N) {
  SelectCode(N);
}

/// createXArchISelDag - This pass converts a legalized DAG into a
/// XArch-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createXArchISelDag(XArchTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new XArchDAGToDAGISel(TM, OptLevel);
}
