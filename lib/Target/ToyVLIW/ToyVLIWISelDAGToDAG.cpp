//===-- ToyVLIWISelDAGToDAG.cpp - A dag to dag inst selector for ToyVLIW ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the ToyVLIW target.
//
//===----------------------------------------------------------------------===//

#include "ToyVLIW.h"
#include "ToyVLIWTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

#include "ToyVLIWInstrInfo.h"

using namespace llvm;

/// ToyVLIWDAGToDAGISel - ToyVLIW specific code to select ToyVLIW machine
/// instructions for SelectionDAG operations.
///
namespace {
class ToyVLIWDAGToDAGISel : public SelectionDAGISel {
  const ToyVLIWSubtarget &Subtarget;

public:
  explicit ToyVLIWDAGToDAGISel(ToyVLIWTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(*TM.getSubtargetImpl()) {}

  void Select(SDNode *N) override;

  virtual llvm::StringRef getPassName() const override {
    return "ToyVLIW DAG->DAG Pattern Instruction Selection";
  }

private:

// Include the pieces autogenerated from the target description.
#include "ToyVLIWGenDAGISel.inc"
};
} // end anonymous namespace

void ToyVLIWDAGToDAGISel::Select(SDNode *N) {
  unsigned int Opc = N->getOpcode();
  if (N->isMachineOpcode()) {
    N->setNodeId(-1);
    return;   // Already selected.
  }
  switch (Opc) {
  default: break;
  }

  SelectCode(N);
}

/// createToyVLIWISelDag - This pass converts a legalized DAG into a
/// ToyVLIW-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createToyVLIWISelDag(ToyVLIWTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new ToyVLIWDAGToDAGISel(TM, OptLevel);
}
